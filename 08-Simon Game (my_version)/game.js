
// ------------------------------------------
// DECALRING VARIABLES ----------------------
// ------------------------------------------

// Keeps the number of moves the player did in each level (each round)
var playerMovesIndex = 0;
// List of sequences generated by the computer
var arrGameSequence = [];
// List of "pad" button elements in the page
var buttons = document.querySelectorAll(".btn-pad")

// ------------------------------------------
//  ADDING EVENT LISTENERS ------------------
// ------------------------------------------

// Adding an event listener to the page for when a keyboard key is pressed
document.addEventListener("keydown", keydownEventHandler);
// Adding an event listner for when a "Pad button" is clicked
for (var btn of buttons) {
  btn.addEventListener("click", btnClickEventHandler);
}

// ------------------------------------------
// EVENT HANDLER FUNCTIONS ------------------
// ------------------------------------------

// Event handler for when a keyobard key is pressed anywhere in the page
function keydownEventHandler(event) {

  if(event.key === "Escape"){
    startNewGame();
  }
}

// Event handler for when a "pad" button is clicked
function btnClickEventHandler(event) {
  // Animates the clicked button
  animateButton(this, 50);
  checkUserInput(this.id);
}

// ------------------------------------------
// GAME LOGIC FUNCTIONS ---------------------
// ------------------------------------------

// Starts the game
function startNewGame() {
  // Emptying the array for a new game;
  arrGameSequence = [];
  playComputersTurn();
}

// Runs the computer's turn, where the sequence and level are incremented
function playComputersTurn() {

  var index = arrGameSequence.length;

  // Updating Level header
  document.querySelector("h1").innerText = "Level " + (index + 1);

  // Reseting number of player inputs for the new btnClickEventHandler
  playerMovesIndex = 0;

  // Generating a random number from 0 to 3
  var randomColor = Math.floor(Math.random() * 4);
  console.log(randomColor);

 // Adding number to the array of sequences
  arrGameSequence.push(randomColor);

  animateButton(buttons[arrGameSequence[index]], 200);
}

function checkUserInput(btnId){
  var btnIndex = getButtonIndexById(btnId);

  // If the user still has colors to choose, checks if he got the right one
  if(playerMovesIndex < arrGameSequence.length){
    if(btnIndex === arrGameSequence[playerMovesIndex])
    {
      playerMovesIndex++;
    }
    else {
      document.querySelector("h1").innerText = "Game Over! Press 'Esc' to start a new game";
    }
  }
  // If the user picked all colors right, moves to computer's turn
  if(playerMovesIndex === arrGameSequence.length) {
    setTimeout(playComputersTurn, 1000);
  }
}

// Returns the button index in the list of buttons by it's color id
function getButtonIndexById(btnId) {

  switch (btnId) {
    case "green": return 0;
    case "red": return 1;
    case "yellow": return 2;
    case "blue": return 3;
    default: return -1; //button doesn't exist
  }
}

// ------------------------------------------
// UI ANIMATION FUNCTIONS -------------------
// ------------------------------------------

// Animates the button by temporarily changing its border color
function animateButton(button, speed) {

  button.style.borderColor = "coral";
  setTimeout(function() {
    button.style.borderColor = "black";}, speed, button);
}
